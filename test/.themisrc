
call themis#option('recursive', 1)

let s:root = getcwd()

function! MinfilerTestHelper() abort
    let helper = {
        \ 'assert': s:assert(),
    \ }

    function! helper.before_each() abort
        execute 'cd' s:root

        call themis#log('')

        filetype on
        syntax enable
    endfunction

    function! helper.after_each() abort
        silent! %bwipeout!
        execute 'cd' s:root

        filetype off
        syntax off
    endfunction

    function! helper.suite(name) abort
        let suite = themis#suite(a:name)
        let suite.before_each = self.before_each
        let suite.after_each = self.after_each
        return suite
    endfunction

    function! helper.buffer_log() abort
        call themis#log('')
        let lines = getbufline('%', 1, '$')
        for line in lines
            call themis#log('[buffer] ' . line)
        endfor
    endfunction

    function! helper.search(pattern) abort
        let result = search(a:pattern)
        if result == 0
            let message = printf('%s not found', a:pattern)
            call self.assert.fail(message)
        endif
        return result
    endfunction

    return helper
endfunction

function! s:assert() abort
    let assert = themis#helper('assert')

    function! assert.current_line(expected) abort
        let actual = getline(line('.'))
        let message = printf('current line should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.file_name(expected) abort
        let actual = fnamemodify(bufname('%'), ':t')
        let message = printf('file name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.filetype(expected) abort
        let actual = &filetype
        let message = printf('&filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.working_dir(expected) abort
        let expected = fnamemodify(a:expected, ':gs?\?\/?')
        let actual = fnamemodify(getcwd(), ':gs?\?\/?')
        let message = printf('current working dir should be %s, but actual: %s', expected, actual)
        call self.equals(actual, expected, message)
    endfunction

    function! assert.syntax_name(expected) abort
        let actual = synIDattr(synID(line('.'), col('.'), v:true), 'name')
        let message = printf('syntax name should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    return assert
endfunction
